```{r}
---
title: "Lab 7 assignment: Group 06"
format: 
  html:
    embed-resources: true
editor: visual
---
```

## Group members

| Name                  | ID              |
|-----------------------|-----------------|
| Arne Hellhund         | arnhell         |
| Magdalena Dzierzynska | s194428         |
| Lasse Buhl            | s215025         |
| Saxe Wagner           | s204559 / sidwa |
| Antonio Mocinic       | s243171         |

# Microreport

This report follows a code-along from this [post on PCA in tidyverse](https://clauswilke.com/blog/2020/09/07/pca-tidyverse-style/). Some of the text in this report is directly copied from the blog post. The purpose of the blogpost is to show how the output of the built-in Principal Component Analysis function in base R `prcomp()` can be made compatible with tidyverse. Then plots are created of PC coordinates, rotation matrix, variance explained and cumulative variance explained.

## Loading libraries

```{r, message=FALSE, running=FALSE}
library("tidyverse")
library("broom") 
#devtools::install_github
#("tidymodels/broom")
library("cowplot")
```

## Loading data from Biopsy Dataset

We’ll be analyzing the `biopsy` dataset, which comes originally from the MASS package. It is a breast cancer dataset from the University of Wisconsin Hospitals, Madison from Dr. William H. Wolberg. The data consists of 683 observations (rows) and 10 variables (columns), and it appears to be a tidy dataset. A notable data wrangling option would be to convert outcome from strings ('benign'/'malignant') to a binary integer/float. This is not necessary for our data analysis however.

```{r}
#Read and save data to 'biopsy'
biopsy <- read_csv(file = "https://wilkelab.org/classes/SDS348/data_sets/biopsy.csv")
```

## Running the PCA and storing it in a new Variable

We start by running the PCA using the built-in function in R `prcomp()` and storing it in a new variable `pca_fit`\`after removing all non-numeric columns using `where(is.numeric).` Prior to running PCA, the data values are scaled to unit variance, using the argument `scale = TRUE` in `prcomp()`.

```{r}
pca_fit <- biopsy |> 
  select(where(is.numeric)) |> # retain only numeric columns
  prcomp(scale = TRUE,center=TRUE) # do PCA on scaled (and centered) data
```

## Look at the data in Principal Component coordinates

The PCs are plotted, by combining the PCs with the original dataset, allowing us to stratify the PCs by color to categorical variables. The function `augment()` from broom takes the fitted model and the original data as arguments, combining the two datasets. The columns containing the fitted coordinates are called `.fittedPC1`, `.fittedPC2`, etc.

```{r}
pca_fit |> 
  augment(biopsy) |>  # add original dataset back in
  ggplot(mapping = aes(.fittedPC1, .fittedPC2, color = outcome)) + 
  geom_point(size = 1.5) +
  scale_color_manual(
    values = c(malignant = "#D55E00", benign = "#0072B2")
  ) +
  theme_half_open(12) + background_grid()+
  labs(title = "Principal Component Coordinates of Biopsy Data",
       x = "PC1",
       y = "PC2")
```

## Store the Rotation Matrix in a New Variable

The rotation matrix is stored as `pca_fit$rotation` when using the built in R function `prcomp`. To make it compatible with tidyverse we extract the rotation matrix using the `tidy()` function from broom. When applied to `prcomp` objects, the `tidy()` function takes an additional argument `matrix`, which is set to `matrix = "rotation"` to extract the rotation matrix. Some data wrangling is also needed so we pivot wider the dataset.

```{r}
# extract rotation matrix and store it in a new variable pca_fit_rotation
pca_fit_rotation <- pca_fit |> 
  tidy(matrix = "rotation") |> 
  pivot_wider(names_from = "PC",
              names_prefix = "PC",
              values_from = "value")
```

## Plotting the Rotation matrix

```{r}
# define arrow style for plotting
arrow_style <- arrow(angle = 20,
                     ends = "first",
                     type = "closed",
                     length = grid::unit(8, "pt")
)

# plot rotation matrix by calling our variable
pca_fit_rotation |> 
  ggplot(aes(PC1, PC2)) +
  geom_segment(xend = 0,
               yend = 0,
               arrow = arrow_style) +
  geom_text(
    aes(label = column),
    hjust = 1, nudge_x = -0.02, 
    color = "#904C2F"
  ) +
  xlim(-1.25, .5) + ylim(-.5, 1) +
  coord_fixed() + # fix aspect ratio to 1:1
  theme_minimal_grid(12)+
  labs(title = "Rotation Matrix from PCA of Biopsy Data")

```

## Store the Eigenvalues in a New Variable

The Eigenvalues are are stored as `pca_fit$eigenvalues` when using the built in R function `prcomp`. To make it compatible with tidyverse we extract the eigenvalues using the `tidy()` function from broom and store it in a new variable.

```{r}
pca_fit_eigenvalues <- pca_fit |> 
  tidy(matrix = "eigenvalues")
```

## Look at the variance explained by each PC

```{r}
pca_fit_eigenvalues |> 
  ggplot(aes(PC, percent))+
  geom_col(fill = "blue", alpha = 0.5)+
  scale_x_continuous(breaks = 1:9)+
  scale_y_continuous(
    labels = scales::percent_format(),
    expand = expansion(mult = c(0,0.01))
  )+
  theme_minimal_hgrid(12)+
  labs(title = "Fraction of variance by Each PC of Biopsy Data",
       x = "Principal component #",
       y = "Variance share")
```

## Cumulative variance explained in PCA

Now, we are going to plot a cumulative variance plot. It explains how much of the variation in the data is captured within the first *x* components. A threshold of 90% is often used to make a reduction in dimensionality without losing too much information. 

```{r}
pca_fit_eigenvalues |>
  ggplot(aes(x = PC, y = cumulative ))+
  geom_point()+
  geom_line()+
  scale_x_continuous(breaks = 1:9) +
   scale_y_continuous(labels = scales::label_percent())+
  geom_hline(yintercept = 0.9, linetype="dashed", color="orange", size = 1)+
  labs(title = "Cumulative variance explained in PCA",
       x = "PCA Principal components",
       y = "cumulative variance"
       )+
  theme_minimal_hgrid(12)+
  theme(panel.grid.minor = element_blank())

  
 
```
